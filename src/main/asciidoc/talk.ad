= Software Development in the 21st century
:icons: font
:twitter-tag: @jensschauder
:conference-tag:
:talk-tag: #sw21cent
:slide-link: http://bit.ly/sd-21-cent
:linkattrs:

include::footer.ad[]

== Not News!

"The best Softwareengineering Tips from the 60s, 70s and 80s"

=== We are living in a Software crisis

=== The computers are too big!

[quote, Edsger Dijkstra, The Humble Programmer (EWD340), Communications of the ACM 1972]
____
The major cause of the software crisis is that the machines have become several orders of magnitude more powerful!
To put it quite bluntly: as long as there were no machines, programming was no problem at all;
when we had a few weak computers, programming became a mild problem, and now we have gigantic computers, programming has become an equally gigantic problem.
____

=== How gigantic?

PDP-11 (1970)

1 CPU

256 kB

10 MHz

I call that 1 CSU (Computer Size Unit)

=== My phone

8 Cores

4 GB

2 GHz

8 * 4000 * 200 CSU = 64.000.000

=== You have a Garden

=== 15m x 15m

=== You inherit more

=== 75m x 75m

You can't handle it!

=== Now Germany is your Garden!

=== Or Europe

[NOTE.speaker]
====
if you are running in the Cloud
====

== Software Engineering!

image::margaret-hamilton.jpg[background, size=contain]

[NOTE.speaker]
====
Margaret Hamilton coined the term to add value to the profession.

It's all about professionalizing the job.
====

=== Managing the Workers

=== Managing the Work

=== Managing the Artifacts

== Managing the Artifacts

=== Modularize all the things

=== Parnas (1972)

https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf[On the Criteria To Be Used in Decomposing Systems into Modules]

[NOTE.speaker]
====
Modularize by maximizing Information hiding.

Do not modularize by flow.
====

=== Layers?

* UI
* Domain
* Persistence

=== Use Domains instead.

* Customer
* Billing
* Orders
* Shipping

=== Maps to Microservices

[NOTE.speaker]
====
Microservices are to be autonomous.

So the can be deployed independently.

Doesn't work with layers.

Don't even ask about performance
====

=== ~99% reuse

[NOTE.speaker]
====
We are actually pretty good at reuse
====

=== Build a VW Golf

With parts from Bulldozers and Windfarms

+

15kg custom parts

=== Reuse is difficult

=== Aim for use.

=== Refactor for reuse

when needed.

=== Software Factories

=== Are a scam.

[NOTE.speaker]
====
The real Software Factories are compilers, build tools and CI servers.
====

== Version Control all the things

=== Source Code

=== Database Scripts

=== Build Scripts

=== Configuration

=== Subversion is not acceptable anymore

Just because you can attack a tank using a sabre doesn't make it a smart thing to do.




== Managing the Work

=== Project Management

== List all the things that need to be done

== Identify constraints

[NOTE.speaker]
====
Walls need to be done before Roof can be build
====

== Assign people

== Maximize Concurrency

[NOTE.speaker]
====
because it shortens the total time until completion.
====

== But

=== Nobody knows what you need

[NOTE.speaker]
====
Classical project management handles that with expensive change request.
But Software is much more maleble.
Change can be the inexpensive standard.
====




=== Beware of the Specification

http://www.commitstrip.com/en/2016/08/25/a-very-comprehensive-and-precise-spec/

=== But also

http://dilbert.com/strip/2016-03-06





== Managing the Workers








=== Projektmanagement (How we create our Software)

Klassische Methoden des Projektmanagements scheinen wenig geeignet.

Done ist schwer zu bestimmen, wenn es nicht genutzt wird.

PM basiert auf repetitiven Tätigkeiten.

Softwareentwicklung ist aber Kreativ.
D.h. nicht, dass wir nicht Regeln unterliegen, die wir einhalten müssen.

Metriken und Boni führen zu abstusen Optimierungen.

Wasserfall ist ein Strohmann.

Todo: Quelle raussuchen

PM Lives in a world with little/slow feedback

Hoover damn is 10x as big as it needs to be


=== The mayor difference

Software is the specification.

Turn around cycles are shorter by multiple magnitudes.

Feedback and the ability to act on it is key to all modern ways to create SW.

We need Transparency. The lack of transparency prevents Feedback.

=== Test and Testability

1 Jahr ohne relevanten Code

vs

1st commit on 2nd day released a few weeks later
and rewrite of a big chunk within half a year.

=== Standups und Retrospektiven

You are not allowed to discard a practice until you can explain its purpose to a Kid and why you don't need it.

"it doesn't help us" is not sufficient.

"We are already really good" is not sufficient.

"We are achieving this by doing x, y, z instead" might be.

=== Pair Programming Mob Programming and Reviews


=== Ausbildung

Erfahrung ist durch fast nichts zu ersetzen.

=== Tools

Version Control

SVN ist not acceptable

Issue Tracker

Automatic Build
CI and CD

What is the value of a bug fix not deployed?

A Fool with a Tool is still a Fool.
Yet know the tools: ID. Git.


=== Build for Production

Logging is not a debugging tool

Metrics and visibility.

=== Agile

XP, Scrum, Kanban

Only build what is worth building.

Ever really looked forward to something and when it happened it was Meh! ?

Be sceptical of Certificates.
You need to internalize these concepts.

=== Management side of things

Managements task is to get problems out of the way.
Establish boundaries to provide Feedback where it isn't immediately available.
Set requirements that need to be met, not tools to be used.
Offer the tools as solution options.

Don't tell me you can't do it.
The Airforce can.

Todo: Read twelve factors





include::self.ad[]
